"""Schemas which are used by privatizers and the privatizer manager."""

from pydantic import UUID4, BaseModel, ConfigDict, NonNegativeInt


class UniqueSensorId(BaseModel):
    """Uniquely identifies a single sensor within the network."""

    model_config = ConfigDict(frozen=True)
    ms_uuid: UUID4
    sensor_id: NonNegativeInt


class SensorLifeCycleBase(BaseModel):
    """Base class for describing the lifecycle of a sensor."""

    contributing: bool = False


class TrixelUpdate(BaseModel):
    """Schema for updates which are generated by a privatizers for a trixel&type."""

    available: bool  # indicates whether there is a value available within the trixel
    value: float | None  # if None, no change happened
    measurement_station_count: NonNegativeInt | None  # if None, no change happened
